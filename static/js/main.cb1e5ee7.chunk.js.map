{"version":3,"sources":["chessGame/ChessGame.jsx","App.js","serviceWorker.js","index.js"],"names":["STOCKFISH","require","Chess","ChessGame","props","get_piece_positions","piece","concat","chess","board","map","p","index","type","color","filter","Number","isInteger","piece_index","Math","ceil","boardStyle","display","boxShadow","margin","sidePanelStyles","undoMove","undo","newSquareStyles","updateInCheckStyles","blackHistory","state","whiteHistory","turn","pop","setState","currentState","fen","squareStyles","gameOverDisplay","game_over","prepareHistory","preparedHistory","length","push","i","temp","newGame","againstAI","previousClickedSqure","welcomeDisplay","displayHomeScreen","calcWidth","screenWidth","screenHeight","onDrop","sourceSquare","targetSquare","move","from","to","promotion","aiMakeMove","updateMoveHistory","history","Promise","resolve","then","engineGame","prepareMove","changePlayerTurnColor","in_check","onSquareClick","square","moves","verbose","moveObject","backgroundColor","options","announced_game_over","engine","Worker","stockfishjs","evaler","engineStatus","time","wtime","btime","winc","binc","clockTimeoutID","uciCmd","cmd","which","postMessage","clockTick","t","clockColor","startTime","Date","now","setTimeout","get_moves","this","setInterval","clearTimeout","elapsed","max","stopClock","depth","nodes","startClock","onmessage","event","line","data","substr","engineLoaded","engineReady","match","search","score","parseInt","toFixed","abs","start","blackKingPiece","whiteKingPiece","selfColor","opponentColor","showBoard","className","style","Button","variant","size","onClick","position","undoCopy","Table","striped","bordered","hover","val","key","currentKingSquare","React","Component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cb1e5ee7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './chessGame.css';\r\nimport {Button, Dropdown, DropdownButton, Table} from 'react-bootstrap';\r\nimport {default as ChessBoard} from 'chessboardjsx';\r\n// import {default as STOCKFISH} from 'stockfish';\r\nconst STOCKFISH = require(\"stockfish\");\r\nconst Chess = require('chess.js');\r\n\r\n\r\n//TODO: History of game + probability of winning on the right => another neural network :D\r\n//TODO: undo/reset buttons + styles slider on the left\r\nexport default class ChessGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentState: null,\r\n            squareStyles: {},\r\n            welcomeDisplay: false,\r\n            againstAI: false,\r\n            whiteHistory: [],\r\n            blackHistory: [],\r\n        }\r\n        this.chess = new Chess();\r\n        this.blackKingPiece = {type: \"k\", color: \"b\"};\r\n        this.whiteKingPiece = {type: \"k\", color: \"w\"};\r\n        this.previousClickedSqure = \"\";\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({welcomeDisplay: true});\r\n    }\r\n\r\n    //code to locate square that a piece is on from https://github.com/jhlywa/chess.js/issues/174\r\n    get_piece_positions = (piece) => {\r\n        return [].concat(...this.chess.board()).map((p, index) => {\r\n          if (p !== null && p.type === piece.type && p.color === piece.color) {\r\n            return index\r\n          }\r\n        }).filter(Number.isInteger).map((piece_index) => {\r\n          const row = 'abcdefgh'[piece_index % 8]\r\n          const column = Math.ceil((64 - piece_index) / 8)\r\n          return row + column\r\n        })\r\n      }\r\n\r\n      \r\n\r\n    \r\n    render() {\r\n        let [selfColor, opponentColor] = this.changePlayerTurnColor();\r\n        let welcomeDisplay = this.state.welcomeDisplay? \"flex\" : \"none\";\r\n        let showBoard = (welcomeDisplay === \"none\")? \"flex\" : \"none\";\r\n        \r\n        return(\r\n            <>\r\n            <div className = \"welcomeScreen\" style = {{display: welcomeDisplay}}>\r\n                <p> Welcome to Luke's Chess App! :D </p>\r\n                <Button variant = \"dark\" size = \"lg\" className = \"againstStockFIsh\"> \r\n                {/* onClick = {() => {this.newGame(true)}}  */}\r\n                    Play Against StockFish Engine AI (Coming soon)\r\n                </Button>\r\n                <Button variant = \"dark\" size = \"lg\" className = \"againstFriendLocally\" onClick = {() => {this.newGame(false)}}> \r\n                    Play Against a Friend Locally\r\n                </Button>\r\n                <Button variant = \"dark\" size = \"lg\" className = \"againstFriendOnline\"> \r\n                    Play Against a Friend Online (Coming Soon)\r\n                </Button>\r\n\r\n            </div>\r\n\r\n\r\n            <div className = \"gameScreen\" style = {{display: showBoard}}>\r\n                <div className = \"leftBoardPanel\">\r\n                            <Button variant = \"dark\" size = \"lg\" className = \"undoButton\" onClick = {this.undoMove}>Undo Move</Button>\r\n                            <Button variant = \"dark\" size = \"lg\" className = \"resetBoardButton\" onClick = {() => {this.newGame(false)}}>Reset Board</Button>\r\n                            <Button variant = \"dark\" size = \"lg\" className = \"newGameButton\" onClick = {this.displayHomeScreen}>Home</Button>\r\n                            {/* <DropdownButton variant = \"dark\" size = \"lg\" id = \"changeBoardStyle\" title = \"Change Board Style (Coming Soon)\">\r\n                                <Dropdown.Item> style 1 </Dropdown.Item>\r\n                                <Dropdown.Item> style 2 </Dropdown.Item>\r\n                                <Dropdown.Item> style 3 </Dropdown.Item> \r\n                            </DropdownButton> */}\r\n                </div>\r\n\r\n                <div className = \"board\">\r\n                    \r\n                    <div className = \"opponentIndicatorWrapper\"> \r\n                        <div className = \"opponentIndicator\" style = {{backgroundColor: opponentColor}}>  </div>\r\n                    </div>\r\n                    \r\n                    <div className = \"centerBoardPanel\">\r\n                        <ChessBoard\r\n                            position = {this.state.currentState} \r\n                            onDrop = {this.onDrop} \r\n                            boardStyle = {this.boardStyle}\r\n                            calcWidth = {this.calcWidth}\r\n                            squareStyles = {this.state.squareStyles}\r\n                            onSquareClick = {this.onSquareClick}\r\n                            undo = {this.undoCopy}\r\n                        />\r\n                    </div>\r\n                    \r\n                    <div className = \"selfIndicatorWrapper\">\r\n                        <div className = \"selfIndicator\" style = {{backgroundColor: selfColor}}> </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className = \"rightBoardPanel\"> \r\n                    <Table striped bordered hover variant=\"dark\">\r\n                    <thead>\r\n                        <tr>\r\n                        <th>#</th>\r\n                        <th>White</th>\r\n                        <th>Black</th>\r\n                        {/* Consider making this the username in the future instead of white/black */}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {this.prepareHistory().map(val => (\r\n                        <tr  key = {val[0]}>\r\n                          <td>{val[0]}</td>\r\n                          <td>{val[1]}</td>\r\n                          <td>{val[2]}</td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                    </Table>\r\n                </div>\r\n\r\n             </div>\r\n             </>\r\n        )\r\n    }\r\n\r\n    boardStyle = {\r\n        display: \"inline-block\",\r\n        boxShadow: '0.5vw 1vh 3vw rgba(0,0,0,0.5)',\r\n        margin: '0 auto 0 auto', //align the board in the center of the screen  \r\n    }\r\n\r\n    sidePanelStyles = {\r\n    }\r\n\r\n    undoMove = () => {\r\n      this.chess.undo();\r\n      let newSquareStyles = this.updateInCheckStyles();\r\n\r\n      let blackHistory = [...this.state.blackHistory];\r\n      let whiteHistory = [...this.state.whiteHistory];\r\n      \r\n      if (this.chess.turn() === \"b\") { //currently black's turn to move, i.e we just undid black's move\r\n        blackHistory.pop();\r\n      } else {\r\n        whiteHistory.pop();\r\n      }\r\n\r\n      this.setState({\r\n        currentState: this.chess.fen(),\r\n        squareStyles: newSquareStyles,\r\n        gameOverDisplay: this.chess.game_over(),\r\n        blackHistory: blackHistory,\r\n        whiteHistory: whiteHistory\r\n      });\r\n    }\r\n\r\n    prepareHistory = () => {\r\n      let preparedHistory = [];\r\n      let whiteHistory = [...this.state.whiteHistory]; //creating copies of an array using ES6 spread operator\r\n      let blackHistory = [...this.state.blackHistory];\r\n      \r\n      if (blackHistory.length < whiteHistory.length) {\r\n        blackHistory.push(\"\"); //if black making move, put an empty string into the box\r\n      }\r\n\r\n\r\n      for (let i = 0; i < whiteHistory.length; i++) {\r\n        let temp = [i+1, whiteHistory[i], blackHistory[i]];\r\n        preparedHistory.push(temp);\r\n      }\r\n\r\n      return preparedHistory;\r\n    }\r\n\r\n    newGame = againstAI => {\r\n        this.chess = new Chess();\r\n        this.previousClickedSqure = \"\";\r\n        this.setState({\r\n          currentState: this.chess.fen(), \r\n          welcomeDisplay: false, \r\n          againstAI: againstAI,\r\n          whiteHistory: [],\r\n          blackHistory: []\r\n        });\r\n    }\r\n\r\n    displayHomeScreen = () => {\r\n      this.setState({welcomeDisplay: true});\r\n    }\r\n\r\n    updateInCheckStyles() {\r\n        let squareStyles = {};\r\n\r\n        if (this.chess.in_check()) {\r\n            let currentKingSquare;\r\n            if (this.chess.turn() === \"b\") {\r\n                currentKingSquare = this.get_piece_positions(this.blackKingPiece);\r\n            } else {\r\n                currentKingSquare = this.get_piece_positions(this.whiteKingPiece);\r\n            }\r\n            squareStyles[`${currentKingSquare}`] = {backgroundColor: 'red'}\r\n        }\r\n\r\n        return squareStyles;\r\n    }\r\n\r\n    calcWidth = ({screenWidth, screenHeight}) => {\r\n        \r\n        if (screenWidth > screenHeight) {\r\n            // this.sidePanelStyles = {\r\n            //     height: `${0.8 * screenHeight}px`,\r\n            //     width: `${(screenWidth - 0.8*screenHeight)/2}px`\r\n            // }\r\n            return 0.8 * screenHeight;\r\n        } else {\r\n            // this.sidePanelStyles = {\r\n            //     height: `${0.8 * screenWidth}px`,\r\n            //     width: `${(screenWidth - 0.8*screenWidth)/2}px`\r\n            // }\r\n            return 0.8 * screenWidth;\r\n        }\r\n        // if (0.8 * screenHeight > screenWidth) return 0.8 * screenWidth;\r\n        // if (0.8 * screenWidth > screenHeight) return 0.8 * screenHeight;\r\n        // return 0.8 * screenWidth;\r\n    }\r\n\r\n    onDrop = ({sourceSquare, targetSquare}) => { \r\n        let move = this.chess.move({\r\n            from: sourceSquare,\r\n            to: targetSquare,\r\n            promotion: \"q\"\r\n        });\r\n\r\n        //if move is illegal\r\n        if (move === null) return;\r\n        \r\n        //set timeouts here\r\n        if (this.state.againstAI) {\r\n            this.aiMakeMove();\r\n        } else {\r\n          this.updateMoveHistory();\r\n        }\r\n    }\r\n\r\n    updateMoveHistory = () => { //update the board and the move history display\r\n      let newSquareStyles = this.updateInCheckStyles();\r\n      switch (this.chess.turn()) {\r\n\r\n        case \"b\": //if white just went, and it's now black's turn: update the pos about where white moved\r\n          let whiteHistory = [...this.state.whiteHistory] //making a copy of whiteHistory using the spread operator\r\n          whiteHistory.push(this.chess.history()[this.chess.history().length - 1]);\r\n          \r\n\r\n          this.setState({\r\n            currentState: this.chess.fen(),\r\n            squareStyles: newSquareStyles,\r\n            gameOverDisplay: this.chess.game_over(),\r\n            whiteHistory: whiteHistory,\r\n          })\r\n\r\n          break;\r\n\r\n        default:\r\n          let blackHistory = [...this.state.blackHistory] //making a copy of blackHistory using the spread operator\r\n          blackHistory.push(this.chess.history()[this.chess.history().length - 1]);\r\n          \r\n\r\n          this.setState({\r\n            currentState: this.chess.fen(),\r\n            squareStyles: newSquareStyles,\r\n            gameOverDisplay: this.chess.game_over(),\r\n            blackHistory: blackHistory,\r\n\r\n          })\r\n        }\r\n      }\r\n    \r\n\r\n    aiMakeMove = () => {\r\n        return new Promise(resolve => {\r\n            this.setState({ currentState: this.chess.fen() });\r\n            resolve();\r\n          }).then(() => this.engineGame().prepareMove());\r\n    }\r\n\r\n    changePlayerTurnColor = () => {\r\n\r\n        if (this.chess.game_over()) {\r\n            //find out who won or if its a tie, display that in a separate screen\r\n            return [\"gold\", \"gold\"];\r\n        }\r\n        switch(this.chess.turn()) {\r\n            case \"b\":\r\n                if (this.chess.in_check()) {\r\n                    return [\"honeydew\", \"red\"];\r\n                } else {\r\n                    return [\"honeydew\", \"lawngreen\"];\r\n                }\r\n            case \"w\":\r\n                if (this.chess.in_check()) {\r\n                    return [\"red\", \"honeydew\"];\r\n                } else {\r\n                    return [\"lawngreen\", \"honeydew\"];\r\n                }\r\n            default:\r\n                return null;\r\n\r\n        }\r\n    }\r\n\r\n    onSquareClick = (square) => {\r\n        let newSquareStyles = this.updateInCheckStyles();\r\n        \r\n        //get all possible moves from this square\r\n        let moves = this.chess.moves({square: square, verbose: true});\r\n\r\n        moves.map((moveObject) => {\r\n            newSquareStyles[`${moveObject.to}`] = {backgroundColor: \"rgba(64,224,208,0.4)\"}\r\n        })\r\n\r\n        let move = this.chess.move({\r\n            from: this.previousClickedSqure,\r\n            to: square,\r\n            promotion: \"q\"\r\n        });\r\n\r\n        if (move === null) {\r\n            this.setState({squareStyles: newSquareStyles});\r\n        } else {\r\n            this.updateMoveHistory();\r\n        }\r\n        this.previousClickedSqure = square;\r\n    }\r\n\r\n    //////////////////////////////////STOCKFISH CHESS ENGINE////////////////////////////////////////\r\n    //Code from https://codesandbox.io/s/432vylv590?from-embed=&file=/src/integrations/Stockfish.js:899-6944\r\n    // and also from https://github.com/nmrugg/stockfish.js/blob/master/example/enginegame.js\r\n    engineGame = options => {\r\n        options = options || {};\r\n    \r\n        /// We can load Stockfish via Web Workers or via STOCKFISH() if loaded from a <script> tag.\r\n        let engine =\r\n          typeof STOCKFISH === \"function\"\r\n            ? STOCKFISH()\r\n            : new Worker(options.stockfishjs || \"stockfish.js\");\r\n        let evaler =\r\n          typeof STOCKFISH === \"function\"\r\n            ? STOCKFISH()\r\n            : new Worker(options.stockfishjs || \"stockfish.js\");\r\n        let engineStatus = {};\r\n        let time = { wtime: 3000, btime: 3000, winc: 1500, binc: 1500 };\r\n        let playerColor = \"black\";\r\n        let clockTimeoutID = null;\r\n        // let isEngineRunning = false;\r\n        let announced_game_over;\r\n        // do not pick up pieces if the game is over\r\n        // only pick up pieces for White\r\n    \r\n        setInterval(function() {\r\n          if (announced_game_over) {\r\n            return;\r\n          }\r\n    \r\n          if (this.chess.game_over()) {\r\n            announced_game_over = true;\r\n          }\r\n        }, 500);\r\n    \r\n        function uciCmd(cmd, which) {\r\n          // console.log('UCI: ' + cmd);\r\n    \r\n          (which || engine).postMessage(cmd);\r\n        }\r\n        uciCmd(\"uci\");\r\n    \r\n        function clockTick() {\r\n          let t =\r\n            (time.clockColor === \"white\" ? time.wtime : time.btime) +\r\n            time.startTime -\r\n            Date.now();\r\n          let timeToNextSecond = (t % 1000) + 1;\r\n          clockTimeoutID = setTimeout(clockTick, timeToNextSecond);\r\n        }\r\n    \r\n        function stopClock() {\r\n          if (clockTimeoutID !== null) {\r\n            clearTimeout(clockTimeoutID);\r\n            clockTimeoutID = null;\r\n          }\r\n          if (time.startTime > 0) {\r\n            let elapsed = Date.now() - time.startTime;\r\n            time.startTime = null;\r\n            if (time.clockColor === \"white\") {\r\n              time.wtime = Math.max(0, time.wtime - elapsed);\r\n            } else {\r\n              time.btime = Math.max(0, time.btime - elapsed);\r\n            }\r\n          }\r\n        }\r\n    \r\n        function startClock() {\r\n          if (this.chess.turn() === \"w\") {\r\n            time.wtime += time.winc;\r\n            time.clockColor = \"white\";\r\n          } else {\r\n            time.btime += time.binc;\r\n            time.clockColor = \"black\";\r\n          }\r\n          time.startTime = Date.now();\r\n          clockTick();\r\n        }\r\n    \r\n        function get_moves() {\r\n          let moves = \"\";\r\n          let history = this.chess.history({ verbose: true });\r\n    \r\n          for (let i = 0; i < history.length; ++i) {\r\n            let move = history[i];\r\n            moves +=\r\n              \" \" + move.from + move.to + (move.promotion ? move.promotion : \"\");\r\n          }\r\n    \r\n          return moves;\r\n        }\r\n    \r\n        const prepareMove = () => {\r\n          stopClock();\r\n          // this.setState({ currentState: this.chess.fen() });\r\n          let turn = this.chess.turn() === \"w\" ? \"white\" : \"black\";\r\n          if (!this.chess.game_over()) {\r\n            // if (turn === playerColor) {\r\n            if (turn !== playerColor) {\r\n              // playerColor = playerColor === 'white' ? 'black' : 'white';\r\n              uciCmd(\"position startpos moves\" + get_moves());\r\n              uciCmd(\"position startpos moves\" + get_moves(), evaler);\r\n              uciCmd(\"eval\", evaler);\r\n    \r\n              if (time && time.wtime) {\r\n                uciCmd(\r\n                  \"go \" +\r\n                    (time.depth ? \"depth \" + time.depth : \"\") +\r\n                    \" wtime \" +\r\n                    time.wtime +\r\n                    \" winc \" +\r\n                    time.winc +\r\n                    \" btime \" +\r\n                    time.btime +\r\n                    \" binc \" +\r\n                    time.binc\r\n                );\r\n              } else {\r\n                uciCmd(\"go \" + (time.depth ? \"depth \" + time.depth : \"\"));\r\n              }\r\n              // isEngineRunning = true;\r\n            }\r\n            if (this.chess.history().length >= 2 && !time.depth && !time.nodes) {\r\n              startClock();\r\n            }\r\n          }\r\n        };\r\n    \r\n        evaler.onmessage = function(event) {\r\n          let line;\r\n    \r\n          if (event && typeof event === \"object\") {\r\n            line = event.data;\r\n          } else {\r\n            line = event;\r\n          }\r\n    \r\n          // console.log('evaler: ' + line);\r\n    \r\n          /// Ignore some output.\r\n          if (\r\n            line === \"uciok\" ||\r\n            line === \"readyok\" ||\r\n            line.substr(0, 11) === \"option name\"\r\n          ) {\r\n            return;\r\n          }\r\n        };\r\n    \r\n        engine.onmessage = event => {\r\n          let line;\r\n    \r\n          if (event && typeof event === \"object\") {\r\n            line = event.data;\r\n          } else {\r\n            line = event;\r\n          }\r\n          // console.log('Reply: ' + line);\r\n          if (line === \"uciok\") {\r\n            engineStatus.engineLoaded = true;\r\n          } else if (line === \"readyok\") {\r\n            engineStatus.engineReady = true;\r\n          } else {\r\n            let match = line.match(/^bestmove ([a-h][1-8])([a-h][1-8])([qrbn])?/);\r\n            /// Did the AI move?\r\n            if (match) {\r\n              // isEngineRunning = false;\r\n              this.chess.move({ from: match[1], to: match[2], promotion: match[3] });\r\n              this.setState({ currentState: this.chess.fen() });\r\n              prepareMove();\r\n              uciCmd(\"eval\", evaler);\r\n              //uciCmd(\"eval\");\r\n              /// Is it sending feedback?\r\n            } else if (\r\n              (match = line.match(/^info .*\\bdepth (\\d+) .*\\bnps (\\d+)/))\r\n            ) {\r\n              engineStatus.search = \"Depth: \" + match[1] + \" Nps: \" + match[2];\r\n            }\r\n    \r\n            /// Is it sending feed back with a score?\r\n            if ((match = line.match(/^info .*\\bscore (\\w+) (-?\\d+)/))) {\r\n              let score = parseInt(match[2], 10) * (this.chess.turn() === \"w\" ? 1 : -1);\r\n              /// Is it measuring in centipawns?\r\n              if (match[1] === \"cp\") {\r\n                engineStatus.score = (score / 100.0).toFixed(2);\r\n                /// Did it find a mate?\r\n              } else if (match[1] === \"mate\") {\r\n                engineStatus.score = \"Mate in \" + Math.abs(score);\r\n              }\r\n    \r\n              /// Is the score bounded?\r\n              if ((match = line.match(/\\b(upper|lower)bound\\b/))) {\r\n                engineStatus.score =\r\n                  ((match[1] === \"upper\") === (this.chess.turn() === \"w\")\r\n                    ? \"<= \"\r\n                    : \">= \") + engineStatus.score;\r\n              }\r\n            }\r\n          }\r\n          // displayStatus();\r\n        };\r\n    \r\n        return {\r\n          start: function() {\r\n            uciCmd(\"ucinewgame\");\r\n            uciCmd(\"isready\");\r\n            engineStatus.engineReady = false;\r\n            engineStatus.search = null;\r\n            prepareMove();\r\n            announced_game_over = false;\r\n          },\r\n          prepareMove: function() {\r\n            prepareMove();\r\n          }\r\n        };\r\n      };\r\n}","import React from 'react';\nimport ChessGame from './chessGame/ChessGame.jsx'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { HashRouter, BrowserRouter, Route } from 'react-router-dom';\nfunction App() {\n  return (\n    <ChessGame />\n  );\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}