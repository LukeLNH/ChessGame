{"version":3,"sources":["ChessGame.jsx","App.js","serviceWorker.js","index.js"],"names":["Chess","require","ChessGame","props","get_piece_positions","piece","concat","chess","board","map","p","index","type","color","filter","Number","isInteger","piece_index","Math","ceil","boardStyle","display","boxShadow","margin","sidePanelStyles","calcWidth","screenWidth","screenHeight","onDrop","sourceSquare","targetSquare","move","from","to","promotion","newSquareStyles","updateInCheckStyles","setState","currentState","fen","squareStyles","changePlayerTurnColor","game_over","turn","in_check","onSquareClick","square","moves","verbose","moveObject","backgroundColor","previousClickedSqure","state","blackKingPiece","whiteKingPiece","this","selfColor","opponentColor","className","style","position","currentKingSquare","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.82bc4ed4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './chessGame.css';\r\nimport {Button, Dropdown, DropdownButton} from 'react-bootstrap';\r\nimport {default as ChessBoard} from 'chessboardjsx';\r\nconst Chess = require('chess.js');\r\n\r\n//TODO: History of game + probability of winning on the right => another neural network :D\r\n//TODO: undo/reset buttons + styles slider on the left\r\n//TODO: complete onPieceClick\r\nexport default class ChessGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentState: null,\r\n            squareStyles: {},\r\n        }\r\n        this.chess = new Chess();\r\n        this.blackKingPiece = {type: \"k\", color: \"b\"};\r\n        this.whiteKingPiece = {type: \"k\", color: \"w\"};\r\n        this.previousClickedSqure = \"\";\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({currentState: this.chess.fen()});\r\n    }\r\n\r\n    //code to locate square that a piece is on from https://github.com/jhlywa/chess.js/issues/174\r\n    get_piece_positions = (piece) => {\r\n        return [].concat(...this.chess.board()).map((p, index) => {\r\n          if (p !== null && p.type === piece.type && p.color === piece.color) {\r\n            return index\r\n          }\r\n        }).filter(Number.isInteger).map((piece_index) => {\r\n          const row = 'abcdefgh'[piece_index % 8]\r\n          const column = Math.ceil((64 - piece_index) / 8)\r\n          return row + column\r\n        })\r\n      }\r\n\r\n      \r\n\r\n    \r\n    render() {\r\n        let [selfColor, opponentColor] = this.changePlayerTurnColor();\r\n        return(\r\n            <div className = \"gameScreen\">\r\n                <div className = \"opponentIndicatorWrapper\"> \r\n                    <div className = \"opponentIndicator\" style = {{backgroundColor: opponentColor}}>  </div>\r\n                </div>\r\n                <div className = \"board\">\r\n                    <div className = \"leftBoardPanel\">\r\n                        {/* <Button variant = \"dark\" size = \"lg\" className = \"undoButton\">Undo Move</Button>\r\n                        <Button variant = \"dark\" size = \"lg\" className = \"resetButton\">Reset Board</Button>\r\n                        <DropdownButton variant = \"dark\" size = \"lg\" id = \"changeBoardStyle\" title = \"Change Board Style\">\r\n                            <Dropdown.Item> style 1 </Dropdown.Item>\r\n                            <Dropdown.Item> style 2 </Dropdown.Item>\r\n                            <Dropdown.Item> style 3 </Dropdown.Item> \r\n                        </DropdownButton> */}\r\n                    </div>\r\n                    <div className = \"centerBoardPanel\">\r\n                        <ChessBoard\r\n                            position = {this.state.currentState} \r\n                            onDrop = {this.onDrop} \r\n                            boardStyle = {this.boardStyle}\r\n                            calcWidth = {this.calcWidth}\r\n                            squareStyles = {this.state.squareStyles}\r\n                            onSquareClick = {this.onSquareClick}\r\n                        />\r\n                    </div>\r\n                    <div className = \"rightBoardPanel\"> </div>\r\n                </div>\r\n                <div className = \"selfIndicatorWrapper\">\r\n                    <div className = \"selfIndicator\" style = {{backgroundColor: selfColor}}> </div>\r\n                </div>\r\n                <div className = \"gameButtons\">\r\n                {// Reset + undo button + change styles dropdown\r\n                }\r\n                </div>\r\n             </div>\r\n        )\r\n    }\r\n\r\n    boardStyle = {\r\n        display: \"inline-block\",\r\n        boxShadow: '0.5vw 1vh 3vw rgba(0,0,0,0.5)',\r\n        margin: '0 auto 0 auto', //align the board in the center of the screen\r\n    }\r\n\r\n    sidePanelStyles = {\r\n\r\n    }\r\n\r\n\r\n    updateInCheckStyles() {\r\n        let squareStyles = {};\r\n\r\n        if (this.chess.in_check()) {\r\n            let currentKingSquare;\r\n            if (this.chess.turn() === \"b\") {\r\n                currentKingSquare = this.get_piece_positions(this.blackKingPiece);\r\n            } else {\r\n                currentKingSquare = this.get_piece_positions(this.whiteKingPiece);\r\n            }\r\n            squareStyles[`${currentKingSquare}`] = {backgroundColor: 'red'}\r\n        }\r\n\r\n        return squareStyles;\r\n    }\r\n\r\n    calcWidth = ({screenWidth, screenHeight}) => {\r\n        \r\n        if (screenWidth > screenHeight) {\r\n            // this.sidePanelStyles = {\r\n            //     height: `${0.8 * screenHeight}px`,\r\n            //     width: `${(screenWidth - 0.8*screenHeight)/2}px`\r\n            // }\r\n            return 0.8 * screenHeight;\r\n        } else {\r\n            // this.sidePanelStyles = {\r\n            //     height: `${0.8 * screenWidth}px`,\r\n            //     width: `${(screenWidth - 0.8*screenWidth)/2}px`\r\n            // }\r\n            return 0.8 * screenWidth;\r\n        }\r\n        // if (0.8 * screenHeight > screenWidth) return 0.8 * screenWidth;\r\n        // if (0.8 * screenWidth > screenHeight) return 0.8 * screenHeight;\r\n        // return 0.8 * screenWidth;\r\n    }\r\n\r\n    onDrop = ({sourceSquare, targetSquare}) => { \r\n        let move = this.chess.move({\r\n            from: sourceSquare,\r\n            to: targetSquare,\r\n            promotion: \"q\"\r\n        });\r\n\r\n        //if move is illegal\r\n        if (move === null) return;\r\n        \r\n        //set timeouts here\r\n        //highlight the king's square if its in check\r\n        //ai makes its move\r\n        let newSquareStyles = this.updateInCheckStyles();\r\n        this.setState({\r\n            currentState: this.chess.fen(),\r\n            squareStyles: newSquareStyles\r\n        })\r\n\r\n    }\r\n\r\n    changePlayerTurnColor = () => {\r\n\r\n        if (this.chess.game_over()) {\r\n            //find out who won or if its a tie, display that in a separate screen\r\n            return [\"gold\", \"gold\"];\r\n        }\r\n        switch(this.chess.turn()) {\r\n            case \"b\":\r\n                if (this.chess.in_check()) {\r\n                    return [\"honeydew\", \"red\"];\r\n                } else {\r\n                    return [\"honeydew\", \"lawngreen\"];\r\n                }\r\n            case \"w\":\r\n                if (this.chess.in_check()) {\r\n                    return [\"red\", \"honeydew\"];\r\n                } else {\r\n                    return [\"lawngreen\", \"honeydew\"];\r\n                }\r\n            default:\r\n                return null;\r\n\r\n        }\r\n    }\r\n\r\n    onSquareClick = (square) => {\r\n        let newSquareStyles = this.updateInCheckStyles();\r\n        \r\n        //get all possible moves from this square\r\n        let moves = this.chess.moves({square: square, verbose: true});\r\n\r\n        moves.map((moveObject) => {\r\n            newSquareStyles[`${moveObject.to}`] = {backgroundColor: \"rgba(64,224,208,0.4)\"}\r\n        })\r\n\r\n        let move = this.chess.move({\r\n            from: this.previousClickedSqure,\r\n            to: square,\r\n            promotion: \"q\"\r\n        });\r\n\r\n        if (move === null) {\r\n            this.setState({squareStyles: newSquareStyles});\r\n        } else {\r\n            this.setState({\r\n                squareStyles: newSquareStyles,\r\n                currentState: this.chess.fen(),\r\n            });\r\n        }\r\n        this.previousClickedSqure = square;\r\n    }\r\n}","import React from 'react';\nimport './App.css';\n// import ChessGame from './chessGame/ChessGame.jsx'\nimport ChessGame from './ChessGame.jsx'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction App() {\n  return (\n    <ChessGame />\n  );\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}